New > Other > Spring > Spring Legacy Project

interface 상속 받아 특정 클래스에 꼭 작성해야 하는 메소드 만들수 있음!

1. xml 파일 생성 - 객체 만듬(덜 의존적으로 발생) > 이름 저장 후 next 클릭후 특정 정보들 추가 가능
Java Resources > New > Others > Spring > Spring Bean Configuration File

<bean class="src 아래 패키지 포함 킄ㄹ래스명" id="변수명">
	constructor-arg : 생성자 통한 삽입
	property : set메소드 통한 삽입 // value(기본형, 참조형), ref(클래스 객체)
</bean>
=> bean 작성 유의점
기본형 타입 : int long double float short byte boolean char // 써도 그만 안써도 그만!
String : 기본형이 아니기 때문에 작성하면 오류가 남

** 맨 위 beans에 아래 2가지 추가하면 각 bean별 처리 가능
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
=> beans 추가 진행 유의점
변수와 매개변수의 이름이 다를 경우 c,p의 뒤에 매개변수의 이름으로 작성해야만 사용 가능

ex)
** 자바코드
CalcBeanImpl cb = new CalcBeanImpl(5);
cb.setSu1(14);
** xml코드(Spring Bean)
	<bean class="sample.CalcBeanImpl" id="cb">
		<constructor-arg>
			<value type="int">5</value>
		</constructor-arg>
		<property name="su1">
			<value type="int">14</value>
		</property>
	</bean>
	
	<bean class="sample.MessageBeanImpl" id="msg">
		<constructor-arg value="윤아" />
		<property name="greeting" value="안녕" />
	</bean>
** beans 추가 진행
	<bean class="sample.CalcBeanImpl" id="cb" c:su2="5" p:su1="14" />
	<bean id="msg" class="sample.MessageBeanImpl" c:name="윤아" p:greeting="안녕"/>

2. 메인 메소드에서는 아래처럼 작성
** 자바코드
CalcBeanImpl cb = new CalcBeanImpl(5);
cb.setSu1(14);
MessageBeanImpl msg = new MessageBeanImpl("윤아");
msg.setGreeting("안녕");
** xml불러와서 실행
Resource resource = new ClassPathResource("applicationCalc.xml");
BeanFactory factory = new XmlBeanFactory(resource);
==============================================================================================================
=> 위 두문장과 같은 역할
*1* ApplicationContext factory = new FileSystemXmlApplicationContext("classpath:applicationCalc.xml");
*2* ApplicationContext factory = new GenericXmlApplicationContext("classpath:applicationCTX.xml");
==============================================================================================================
CalcBeanImpl cb = (CalcBeanImpl) factory.getBean("cb");
cb.calculate();
MessageBeanImpl msg = (MessageBeanImpl) factory.getBean("msg");
msg.sayHello();

** AOP사용 하기 위해 pom.xml 내용 추가
-> pointcut="execution(반환값 패키지.클래스.메소드())"
-> order-after는 숫자가 큰게 먼저 진행, -before는 숫자가 작은게 먼저 진행
	<aop:config>
		<aop:aspect ref="daoAdvice" order="2">
			<aop:after method="dao"
				pointcut="execution(* com.spring.ex5.OrderImpl.*())" />
		</aop:aspect>
	</aop:config>

	
** requestMapping
@RequestMapping(value = "/member/view") // method 생략하면 get방식이든 post방식이든 모두 처리하겠다.
일부 정보를 챙겨가고자 할 때 Model model, HttpServletRequest request 이용
ex) 	model.addAttribute("id","abc");
		request.setAttribute("pw","xyz");


** Spring MVC 작동 순서
1. web.xml ( 한글설정 )
	<!-- 한글설정 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
2. root-context.xml
3. servlet-context.xml
	setPrefix("/WEB-INF/views/");
	setSuffix(".jsp");
	scan package
4. @Controller 클래스 - @Controller 작성해야만 가능
5. @RequestMapping	


** 프로그램 실행하는 방법
프로젝트명(08_MVC_param) 찍고 - 우클릭 Run as - Run on Server 클릭
=> 에러 발생 : 서버 삭제(delete)하고 다시 실행(실행 전 포트 번호 적용 필수)

command 객체 : 넘어오는 파라미터를 가지고 set 통해 주입하여 만들어지는 객체
@ModelAttribute("abcd") 별칭 설정해서 사용 가능하지만 별칭 사용 시에는 별칭으로만 사용해야한다.

** c, fn, fmt, form 등을 prefix에 사용 가능 => <%@ taglib prefix="" uri="http://www.springframework.org/tags/" %>

** 유효성 검사
		<!-- 유효성 검사 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.2.0.Final</version>
		</dependency>
		
=> mybatis 이용할 때 해당 servlet에 아래 추가해야함
<mvc:annotation-driven />
// 텍스트는 @NotEmpty로 적용시 빈칸을 인식하지 못하므로 사용 권장하지 않음, @NotNull 적용 안됨 
// 셀렉트는  @NotEmpty, @NotBlank 사용 가능, @NotNull 적용 안됨
// 체크박스는  @NotEmpty, @NotNull, @NotBlank 모두 사용 가능
// 라디오는 @NotEmpty, @NotNull, @NotBlank 모두 사용 가능


** DB
		<!-- oracle 설정 -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>12.1.0.1</version>
		</dependency>
		
		<!-- datasource설정 -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
		
		<!-- 마이바티스 설정 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.1.0</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.1.0</version>
		</dependency>

<dependencies> 위에 아래 추가해야만 사용 가능
	<repositories>
		<repository>
			<id>oracle</id>
			<name>ORACLE JDBC Repository</name>
			<url>http://maven.jahia.org/maven2</url>
		</repository>
	</repositories>
	
** 메소드 확인 방법
request.getMethod();
		
		<!-- 화일 업로드 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2.2</version>
		</dependency>
		
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.3.2</version>
		</dependency>
		

http://www.mybatis.org/mybatis-3/ko/getting-started.html
dtd => xsd 같은 기능
** SqlMapConfig.xml 아래 내용 추가
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
  
** album.xml 아래 내용 추가
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">